import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:zero_waste/models/waste_analysis.dart';

class WasteAnalysisRepository {
  final CollectionReference _analysisCollection = FirebaseFirestore.instance.collection('daily_analysis');

  // Add analysis (auto-generate analysisId)
  Future<void> createAnalysis(WasteAnalysis wasteAnalysis) async {
    try {
      // Firestore will automatically generate an ID for the document
      await _analysisCollection.add(wasteAnalysis.toMap());
    } catch (e) {
      throw Exception('Error creating analysis: $e');
    }
  }

  // View analysis by autogenerated analysisId
  Future<WasteAnalysis> getAnalyse(String analysisId) async {
    try {
      DocumentSnapshot snapshot = await _analysisCollection.doc(analysisId).get();
      if (snapshot.exists) {
        return WasteAnalysis.fromDocument(snapshot);
      } else {
        throw Exception('Analysis not found for the given ID');
      }
    } catch (e) {
      throw Exception('Error retrieving analysis: $e');
    }
  }

  // Fetch all analysis records
  Future<List<WasteAnalysis>> getAllAnalyses() async {
    try {
      QuerySnapshot snapshot = await _analysisCollection.get();
      return snapshot.docs.map((doc) => WasteAnalysis.fromDocument(doc)).toList();
    } catch (e) {
      throw Exception('Error retrieving all analyses: $e');
    }
  }

  // Get count of analyses by userType
  Future<int> getCountByUserType(String userType) async {
    try {
      QuerySnapshot snapshot = await _analysisCollection.where('userType', isEqualTo: userType).get();
      return snapshot.docs.length; // Return the count of documents that match the userType
    } catch (e) {
      throw Exception('Error retrieving count by userType: $e');
    }
  }
}
